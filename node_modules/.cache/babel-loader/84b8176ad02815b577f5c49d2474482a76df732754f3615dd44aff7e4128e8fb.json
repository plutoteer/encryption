{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport { getCurrentParticipantInfo, getAllParticipantsConfig, getCoordinatorStatus } from '../api/participant.js';\nexport default {\n  __name: 'ParticipantSwitcher',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const loading = ref(false);\n    const participantsData = ref([]);\n    const coordinatorStatus = ref(null);\n    const error = ref(null);\n\n    // 获取当前参与方信息\n    const currentParticipant = getCurrentParticipantInfo();\n\n    // 默认参与方配置\n    const defaultParticipants = [{\n      id: 1,\n      name: '参与方1',\n      frontend_port: 8030,\n      backend_port: 8083\n    }, {\n      id: 2,\n      name: '参与方2',\n      frontend_port: 8031,\n      backend_port: 8082\n    }, {\n      id: 3,\n      name: '参与方3',\n      frontend_port: 8032,\n      backend_port: 8081\n    }];\n\n    // 合并参与方配置和在线状态\n    const participants = computed(() => {\n      if (!participantsData.value.length) return defaultParticipants;\n      return participantsData.value.map(participant => {\n        // 查找对应的在线状态\n        const onlineStatus = coordinatorStatus.value?.participants?.find(p => p.id === participant.id);\n        return {\n          ...participant,\n          status: onlineStatus?.status || 'offline',\n          last_heartbeat: onlineStatus?.last_heartbeat\n        };\n      });\n    });\n\n    // 判断是否为当前参与方\n    const isCurrentParticipant = id => {\n      return id === currentParticipant.id;\n    };\n\n    // 刷新参与方数据\n    const refreshParticipants = async () => {\n      loading.value = true;\n      error.value = null;\n      try {\n        // 并行获取参与方配置和协调器状态\n        const [configResponse, statusResponse] = await Promise.all([getAllParticipantsConfig(), getCoordinatorStatus()]);\n        participantsData.value = configResponse.data?.participants || defaultParticipants;\n        coordinatorStatus.value = statusResponse.data;\n      } catch (err) {\n        console.error('获取参与方数据失败:', err);\n        error.value = '无法连接到后端服务，使用默认配置';\n        participantsData.value = defaultParticipants;\n        coordinatorStatus.value = null;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 切换到指定参与方\n    const switchToParticipant = participant => {\n      if (isCurrentParticipant(participant.id)) return;\n      const url = `http://localhost:${participant.frontend_port}`;\n      window.open(url, '_blank');\n    };\n\n    // 打开参与方页面\n    const openParticipantPage = participant => {\n      const url = `http://localhost:${participant.frontend_port}`;\n      window.open(url, '_blank');\n    };\n\n    // 打开所有参与方\n    const openAllParticipants = () => {\n      participants.value.forEach(participant => {\n        const url = `http://localhost:${participant.frontend_port}`;\n        window.open(url, '_blank');\n      });\n    };\n\n    // 组件挂载时获取数据\n    onMounted(() => {\n      refreshParticipants();\n\n      // 每60秒自动刷新一次\n      setInterval(() => {\n        if (!loading.value && !error.value) {\n          refreshParticipants();\n        }\n      }, 60000);\n    });\n    const __returned__ = {\n      loading,\n      participantsData,\n      coordinatorStatus,\n      error,\n      currentParticipant,\n      defaultParticipants,\n      participants,\n      isCurrentParticipant,\n      refreshParticipants,\n      switchToParticipant,\n      openParticipantPage,\n      openAllParticipants,\n      ref,\n      onMounted,\n      computed,\n      get getCurrentParticipantInfo() {\n        return getCurrentParticipantInfo;\n      },\n      get getAllParticipantsConfig() {\n        return getAllParticipantsConfig;\n      },\n      get getCoordinatorStatus() {\n        return getCoordinatorStatus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","getCurrentParticipantInfo","getAllParticipantsConfig","getCoordinatorStatus","loading","participantsData","coordinatorStatus","error","currentParticipant","defaultParticipants","id","name","frontend_port","backend_port","participants","value","length","map","participant","onlineStatus","find","p","status","last_heartbeat","isCurrentParticipant","refreshParticipants","configResponse","statusResponse","Promise","all","data","err","console","switchToParticipant","url","window","open","openParticipantPage","openAllParticipants","forEach","setInterval"],"sources":["E:/大三下学习资料/项目实训/MPHEDevCombine/MPHEDevFrontEnd/ParticipantFrontEnd/encryption/src/components/ParticipantSwitcher.vue"],"sourcesContent":["<template>\r\n  <div class=\"participant-switcher\">\r\n    <div class=\"switcher-header\">\r\n      <div class=\"header-icon\">🔄</div>\r\n      <h3 class=\"header-title\">参与方切换</h3>\r\n      <button @click=\"refreshParticipants\" class=\"refresh-btn\" :disabled=\"loading\">\r\n        <span class=\"refresh-icon\">🔄</span>\r\n        <span class=\"refresh-text\">{{ loading ? '刷新中...' : '刷新' }}</span>\r\n      </button>\r\n    </div>\r\n    \r\n    <!-- 错误状态显示 -->\r\n    <div v-if=\"error\" class=\"error-message\">\r\n      <div class=\"error-icon\">⚠️</div>\r\n      <div class=\"error-content\">\r\n        <h4 class=\"error-title\">无法获取参与方配置</h4>\r\n        <p class=\"error-text\">{{ error }}</p>\r\n        <button @click=\"refreshParticipants\" class=\"retry-btn\">\r\n          <span class=\"retry-icon\">🔄</span>\r\n          <span class=\"retry-text\">重试</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 参与方列表 -->\r\n    <div v-else class=\"participants-grid\">\r\n      <div \r\n        v-for=\"participant in participants\" \r\n        :key=\"participant.id\"\r\n        class=\"participant-item\"\r\n        :class=\"{ \r\n          'current': isCurrentParticipant(participant.id),\r\n          'online': participant.status === 'online',\r\n          'offline': participant.status === 'offline'\r\n        }\"\r\n      >\r\n        <div class=\"participant-content\">\r\n          <div class=\"participant-info\">\r\n            <div class=\"participant-name\">{{ participant.name }}</div>\r\n            <div class=\"participant-ports\">\r\n              <span class=\"port-badge frontend\">前端: {{ participant.frontend_port }}</span>\r\n              <span class=\"port-badge backend\">后端: {{ participant.backend_port || '未知' }}</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"participant-actions\">\r\n            <div class=\"status-indicator\">\r\n              <div class=\"status-dot\" :class=\"participant.status\"></div>\r\n              <span class=\"status-text\">{{ participant.status === 'online' ? '在线' : '离线' }}</span>\r\n            </div>\r\n            \r\n            <div class=\"action-buttons\">\r\n              <button \r\n                @click=\"switchToParticipant(participant)\"\r\n                class=\"action-btn switch-btn\"\r\n                :disabled=\"isCurrentParticipant(participant.id)\"\r\n              >\r\n                <span class=\"btn-icon\">🚀</span>\r\n                <span class=\"btn-text\">{{ isCurrentParticipant(participant.id) ? '当前' : '切换' }}</span>\r\n              </button>\r\n              \r\n              <button \r\n                @click=\"openParticipantPage(participant)\"\r\n                class=\"action-btn open-btn\"\r\n              >\r\n                <span class=\"btn-icon\">🌐</span>\r\n                <span class=\"btn-text\">打开</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div v-if=\"isCurrentParticipant(participant.id)\" class=\"current-badge\">\r\n          <span class=\"current-text\">当前参与方</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"switcher-footer\">\r\n      <button @click=\"openAllParticipants\" class=\"footer-btn\">\r\n        <span class=\"btn-icon\">📱</span>\r\n        <span class=\"btn-text\">打开所有参与方</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue'\r\nimport { getCurrentParticipantInfo, getAllParticipantsConfig, getCoordinatorStatus } from '../api/participant.js'\r\n\r\nconst loading = ref(false)\r\nconst participantsData = ref([])\r\nconst coordinatorStatus = ref(null)\r\nconst error = ref(null)\r\n\r\n// 获取当前参与方信息\r\nconst currentParticipant = getCurrentParticipantInfo()\r\n\r\n// 默认参与方配置\r\nconst defaultParticipants = [\r\n  {\r\n    id: 1,\r\n    name: '参与方1',\r\n    frontend_port: 8030,\r\n    backend_port: 8083\r\n  },\r\n  {\r\n    id: 2,\r\n    name: '参与方2',\r\n    frontend_port: 8031,\r\n    backend_port: 8082\r\n  },\r\n  {\r\n    id: 3,\r\n    name: '参与方3',\r\n    frontend_port: 8032,\r\n    backend_port: 8081\r\n  }\r\n]\r\n\r\n// 合并参与方配置和在线状态\r\nconst participants = computed(() => {\r\n  if (!participantsData.value.length) return defaultParticipants\r\n  \r\n  return participantsData.value.map(participant => {\r\n    // 查找对应的在线状态\r\n    const onlineStatus = coordinatorStatus.value?.participants?.find(\r\n      p => p.id === participant.id\r\n    )\r\n    \r\n    return {\r\n      ...participant,\r\n      status: onlineStatus?.status || 'offline',\r\n      last_heartbeat: onlineStatus?.last_heartbeat\r\n    }\r\n  })\r\n})\r\n\r\n// 判断是否为当前参与方\r\nconst isCurrentParticipant = (id) => {\r\n  return id === currentParticipant.id\r\n}\r\n\r\n// 刷新参与方数据\r\nconst refreshParticipants = async () => {\r\n  loading.value = true\r\n  error.value = null\r\n  \r\n  try {\r\n    // 并行获取参与方配置和协调器状态\r\n    const [configResponse, statusResponse] = await Promise.all([\r\n      getAllParticipantsConfig(),\r\n      getCoordinatorStatus()\r\n    ])\r\n    \r\n    participantsData.value = configResponse.data?.participants || defaultParticipants\r\n    coordinatorStatus.value = statusResponse.data\r\n  } catch (err) {\r\n    console.error('获取参与方数据失败:', err)\r\n    error.value = '无法连接到后端服务，使用默认配置'\r\n    participantsData.value = defaultParticipants\r\n    coordinatorStatus.value = null\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 切换到指定参与方\r\nconst switchToParticipant = (participant) => {\r\n  if (isCurrentParticipant(participant.id)) return\r\n  \r\n  const url = `http://localhost:${participant.frontend_port}`\r\n  window.open(url, '_blank')\r\n}\r\n\r\n// 打开参与方页面\r\nconst openParticipantPage = (participant) => {\r\n  const url = `http://localhost:${participant.frontend_port}`\r\n  window.open(url, '_blank')\r\n}\r\n\r\n// 打开所有参与方\r\nconst openAllParticipants = () => {\r\n  participants.value.forEach(participant => {\r\n    const url = `http://localhost:${participant.frontend_port}`\r\n    window.open(url, '_blank')\r\n  })\r\n}\r\n\r\n// 组件挂载时获取数据\r\nonMounted(() => {\r\n  refreshParticipants()\r\n  \r\n  // 每60秒自动刷新一次\r\n  setInterval(() => {\r\n    if (!loading.value && !error.value) {\r\n      refreshParticipants()\r\n    }\r\n  }, 60000)\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.participant-switcher {\r\n  background: rgba(255, 255, 255, 0.95);\r\n  backdrop-filter: blur(25px);\r\n  border: 1px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 25px;\r\n  overflow: hidden;\r\n  box-shadow: 0 15px 50px rgba(0, 0, 0, 0.12);\r\n  position: relative;\r\n}\r\n\r\n.participant-switcher::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 5px;\r\n  background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\r\n}\r\n\r\n.switcher-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 18px;\r\n  padding: 30px 30px 20px 30px;\r\n  border-bottom: 1px solid rgba(102, 126, 234, 0.1);\r\n}\r\n\r\n.header-icon {\r\n  font-size: 2rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 60px;\r\n  height: 60px;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 18px;\r\n  box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);\r\n  color: white;\r\n}\r\n\r\n.header-title {\r\n  margin: 0;\r\n  color: #1e293b;\r\n  font-size: 1.4rem;\r\n  font-weight: 800;\r\n  letter-spacing: -0.01em;\r\n  flex: 1;\r\n}\r\n\r\n.refresh-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 12px 20px;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 12px;\r\n  font-size: 0.9rem;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.refresh-btn:hover:not(:disabled) {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);\r\n}\r\n\r\n.refresh-btn:disabled {\r\n  opacity: 0.6;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.refresh-icon {\r\n  font-size: 1rem;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.refresh-btn:not(:disabled):hover .refresh-icon {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.error-message {\r\n  background: rgba(239, 68, 68, 0.1);\r\n  border: 1px solid rgba(239, 68, 68, 0.3);\r\n  border-radius: 15px;\r\n  padding: 20px;\r\n  margin: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.error-icon {\r\n  font-size: 2rem;\r\n  color: #ef4444;\r\n}\r\n\r\n.error-content {\r\n  flex: 1;\r\n}\r\n\r\n.error-title {\r\n  margin: 0 0 8px 0;\r\n  color: #ef4444;\r\n  font-size: 1.1rem;\r\n  font-weight: 700;\r\n}\r\n\r\n.error-text {\r\n  margin: 0 0 15px 0;\r\n  color: #64748b;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.retry-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 8px 16px;\r\n  background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 10px;\r\n  font-size: 0.9rem;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.retry-btn:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 8px 25px rgba(239, 68, 68, 0.3);\r\n}\r\n\r\n.retry-icon {\r\n  font-size: 1rem;\r\n}\r\n\r\n.participants-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\r\n  gap: 20px;\r\n  padding: 30px;\r\n}\r\n\r\n.participant-item {\r\n  position: relative;\r\n  background: white;\r\n  border: 2px solid #e2e8f0;\r\n  border-radius: 20px;\r\n  padding: 25px;\r\n  transition: all 0.3s ease;\r\n  overflow: hidden;\r\n}\r\n\r\n.participant-item.online {\r\n  border-color: #10b981;\r\n  background: linear-gradient(135deg, rgba(16, 185, 129, 0.05) 0%, rgba(16, 185, 129, 0.02) 100%);\r\n}\r\n\r\n.participant-item.offline {\r\n  border-color: #ef4444;\r\n  background: linear-gradient(135deg, rgba(239, 68, 68, 0.05) 0%, rgba(239, 68, 68, 0.02) 100%);\r\n}\r\n\r\n.participant-item.current {\r\n  border-color: #667eea;\r\n  background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(102, 126, 234, 0.05) 100%);\r\n  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);\r\n}\r\n\r\n.participant-item:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.participant-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n}\r\n\r\n.participant-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.participant-name {\r\n  font-size: 1.3rem;\r\n  font-weight: 800;\r\n  color: #1e293b;\r\n  margin: 0;\r\n}\r\n\r\n.participant-ports {\r\n  display: flex;\r\n  gap: 10px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.port-badge {\r\n  padding: 6px 12px;\r\n  border-radius: 20px;\r\n  font-size: 0.8rem;\r\n  font-weight: 600;\r\n  color: white;\r\n}\r\n\r\n.port-badge.frontend {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n}\r\n\r\n.port-badge.backend {\r\n  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\r\n}\r\n\r\n.participant-actions {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.status-indicator {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.status-dot {\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  background: #ef4444;\r\n  animation: pulse 2s infinite;\r\n}\r\n\r\n.status-dot.online {\r\n  background: #10b981;\r\n}\r\n\r\n.status-dot.offline {\r\n  background: #ef4444;\r\n}\r\n\r\n@keyframes pulse {\r\n  0%, 100% {\r\n    opacity: 1;\r\n  }\r\n  50% {\r\n    opacity: 0.5;\r\n  }\r\n}\r\n\r\n.status-text {\r\n  font-size: 0.85rem;\r\n  font-weight: 600;\r\n  color: #64748b;\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.action-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n  padding: 8px 16px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  font-size: 0.85rem;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  color: white;\r\n}\r\n\r\n.action-btn.switch-btn {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n}\r\n\r\n.action-btn.switch-btn:disabled {\r\n  background: #94a3b8;\r\n  cursor: not-allowed;\r\n  opacity: 0.6;\r\n}\r\n\r\n.action-btn.open-btn {\r\n  background: linear-gradient(135deg, #10b981 0%, #059669 100%);\r\n}\r\n\r\n.action-btn:hover:not(:disabled) {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.btn-icon {\r\n  font-size: 1rem;\r\n}\r\n\r\n.current-badge {\r\n  position: absolute;\r\n  top: 15px;\r\n  right: 15px;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  padding: 6px 16px;\r\n  border-radius: 25px;\r\n  font-size: 0.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.switcher-footer {\r\n  padding: 20px 30px 30px 30px;\r\n  border-top: 1px solid rgba(102, 126, 234, 0.1);\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.footer-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 15px 30px;\r\n  background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 15px;\r\n  font-size: 1rem;\r\n  font-weight: 700;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  box-shadow: 0 8px 25px rgba(250, 112, 154, 0.3);\r\n}\r\n\r\n.footer-btn:hover {\r\n  transform: translateY(-3px);\r\n  box-shadow: 0 12px 35px rgba(250, 112, 154, 0.4);\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .switcher-header {\r\n    flex-direction: column;\r\n    gap: 15px;\r\n    align-items: stretch;\r\n  }\r\n  \r\n  .header-title {\r\n    text-align: center;\r\n  }\r\n  \r\n  .refresh-btn {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .participants-grid {\r\n    grid-template-columns: 1fr;\r\n    padding: 20px;\r\n  }\r\n  \r\n  .participant-actions {\r\n    flex-direction: column;\r\n    gap: 15px;\r\n    align-items: stretch;\r\n  }\r\n  \r\n  .action-buttons {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .participant-ports {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .error-message {\r\n    flex-direction: column;\r\n    text-align: center;\r\n    margin: 15px;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}