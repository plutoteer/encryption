{"ast":null,"code":"import axios from 'axios';\nimport env from '../config/env';\n\n// 全局baseURL配置\nlet currentBaseURL = null;\n\n// 从环境变量获取后端端口，如果没有则使用默认值\nconst getBackendPort = () => {\n  // 优先使用环境变量配置（支持多种方式）\n  let backendPort = env.BACKEND_PORT || process.env.VUE_APP_BACKEND_PORT || window.BACKEND_PORT;\n\n  // 如果环境变量没有设置，尝试从URL参数获取\n  if (!backendPort) {\n    const urlParams = new URLSearchParams(window.location.search);\n    backendPort = urlParams.get('backendPort');\n  }\n\n  // 如果都没有，根据前端端口推断后端端口\n  if (!backendPort) {\n    const frontendPort = window.location.port || '8030';\n    switch (frontendPort) {\n      case '8030':\n        backendPort = '8083';\n        break;\n      case '8031':\n        backendPort = '8082';\n        break;\n      case '8032':\n        backendPort = '8081';\n        break;\n      default:\n        backendPort = '8083';\n      // 默认端口\n    }\n  }\n\n  // 确保端口号是有效的数字字符串\n  if (!backendPort || typeof backendPort !== 'string' || backendPort.trim() === '') {\n    console.warn('无效的后端端口:', backendPort, '使用默认端口8083');\n    backendPort = '8083';\n  }\n\n  // 验证端口号是否为有效数字\n  const portNum = parseInt(backendPort, 10);\n  if (isNaN(portNum) || portNum < 1 || portNum > 65535) {\n    console.warn('端口号超出范围:', backendPort, '使用默认端口8083');\n    backendPort = '8083';\n  }\n  console.log('🔍 getBackendPort: 获取到的后端端口:', backendPort);\n  console.log('🔍 getBackendPort: 环境变量:', {\n    env_BACKEND_PORT: env.BACKEND_PORT,\n    process_env_VUE_APP_BACKEND_PORT: process.env.VUE_APP_BACKEND_PORT,\n    window_BACKEND_PORT: window.BACKEND_PORT\n  });\n  return backendPort;\n};\n\n// 获取当前baseURL\nconst getBaseURL = () => {\n  if (!currentBaseURL) {\n    const backendPort = getBackendPort();\n\n    // 确保端口号有效\n    if (!backendPort || isNaN(parseInt(backendPort, 10))) {\n      console.error('无效的后端端口:', backendPort);\n      currentBaseURL = 'http://localhost:8083';\n    } else {\n      currentBaseURL = `http://localhost:${backendPort}`;\n    }\n\n    // 验证URL是否有效\n    try {\n      new URL(currentBaseURL);\n      console.log('设置baseURL:', currentBaseURL);\n    } catch (error) {\n      console.error('无效的baseURL:', currentBaseURL, error);\n      currentBaseURL = 'http://localhost:8083';\n      console.log('使用默认baseURL:', currentBaseURL);\n    }\n  }\n  return currentBaseURL;\n};\n\n// 更新baseURL\nconst updateBaseURL = newPort => {\n  if (newPort && newPort !== getBackendPort()) {\n    // 验证新端口号\n    const portNum = parseInt(newPort, 10);\n    if (isNaN(portNum) || portNum < 1 || portNum > 65535) {\n      console.warn('无效的新端口号:', newPort);\n      return;\n    }\n    const newBaseURL = `http://localhost:${newPort}`;\n\n    // 验证新URL是否有效\n    try {\n      new URL(newBaseURL);\n      currentBaseURL = newBaseURL;\n      instance.defaults.baseURL = currentBaseURL;\n      console.log('更新baseURL为:', currentBaseURL);\n    } catch (error) {\n      console.error('无效的新baseURL:', newBaseURL, error);\n    }\n  }\n};\n\n// 创建axios实例\nconst instance = axios.create({\n  baseURL: getBaseURL(),\n  // 设置请求头大小限制\n  maxHeaderSize: 8192,\n  // 设置超时时间\n  timeout: 30000,\n  // 增加超时时间到30秒\n  // 设置响应类型\n  responseType: 'json',\n  // 设置最大内容长度\n  maxContentLength: 50 * 1024 * 1024,\n  // 50MB\n  maxBodyLength: 50 * 1024 * 1024 // 50MB\n});\nconsole.log('API实例已创建，baseURL:', instance.defaults.baseURL);\n\n// 请求拦截器：动态更新baseURL和清理请求头\ninstance.interceptors.request.use(config => {\n  // 确保baseURL是最新的\n  const currentURL = getBaseURL();\n  if (config.baseURL !== currentURL) {\n    config.baseURL = currentURL;\n  }\n\n  // 移除可能导致431错误的请求头\n  if (config.headers) {\n    // 移除Cookie头，避免431错误\n    delete config.headers.Cookie;\n    // 移除其他可能导致问题的头\n    delete config.headers['X-Powered-By'];\n    delete config.headers['X-Requested-With'];\n  }\n  console.log('发送请求:', config.method?.toUpperCase(), config.url, '到', config.baseURL);\n  return config;\n}, error => {\n  console.error('请求拦截器错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器：处理错误和重试逻辑\ninstance.interceptors.response.use(response => {\n  console.log('API响应成功:', response.config.url, response.status);\n  return response;\n}, async error => {\n  console.error('API响应错误:', error.config?.url, error.message);\n\n  // 如果是网络错误，尝试重新检测端口\n  if (error.code === 'ERR_NETWORK' || error.code === 'ECONNREFUSED') {\n    console.log('检测到网络错误，尝试重新检测后端端口...');\n\n    // 尝试不同的端口\n    const ports = ['8083', '8082', '8081', '8084', '8085'];\n    for (const port of ports) {\n      try {\n        const testURL = `http://localhost:${port}/status`;\n        console.log('测试端口:', port, testURL);\n        const testResponse = await fetch(testURL, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json'\n          },\n          timeout: 3000\n        });\n        if (testResponse.ok) {\n          console.log('找到可用端口:', port);\n          updateBaseURL(port);\n          // 重新发送原始请求\n          const originalConfig = error.config;\n          originalConfig.baseURL = getBaseURL();\n          return instance.request(originalConfig);\n        }\n      } catch (testError) {\n        console.log('端口', port, '不可用:', testError.message);\n      }\n    }\n  }\n  return Promise.reject(error);\n});\nexport async function getSelfStatus() {\n  // 使用参与方后端实际实现的端点\n  return instance.get('/status');\n}\nexport function getOnlineStatus() {\n  // 参与方后端没有实现这个端点，返回默认状态\n  return Promise.resolve({\n    data: {\n      online_participants: 3,\n      expected_participants: 3,\n      online_percentage: 100,\n      min_participants: 2,\n      can_proceed: true,\n      online_timeout: 30,\n      heartbeat_interval: 5,\n      participants: [{\n        id: 1,\n        url: \"http://localhost:8083\",\n        status: \"online\",\n        last_heartbeat: new Date().toISOString()\n      }, {\n        id: 2,\n        url: \"http://localhost:8082\",\n        status: \"online\",\n        last_heartbeat: new Date().toISOString()\n      }, {\n        id: 3,\n        url: \"http://localhost:8081\",\n        status: \"online\",\n        last_heartbeat: new Date().toISOString()\n      }]\n    }\n  });\n}\nexport async function getBackendOutput() {\n  console.log('🔍 getBackendOutput: 开始调用');\n  console.log('🔍 getBackendOutput: 当前baseURL:', getBaseURL());\n  console.log('🔍 getBackendOutput: 实例baseURL:', instance.defaults.baseURL);\n  console.log('🔍 getBackendOutput: 环境变量:', {\n    BACKEND_PORT: env.BACKEND_PORT,\n    FRONTEND_PORT: env.FRONTEND_PORT,\n    COORDINATOR_PORT: env.COORDINATOR_PORT\n  });\n  const requestURL = '/api/participant/backend-output';\n  const fullURL = `${getBaseURL()}${requestURL}`;\n  console.log('🔍 getBackendOutput: 请求URL:', requestURL);\n  console.log('🔍 getBackendOutput: 完整URL:', fullURL);\n\n  // 验证URL是否有效\n  try {\n    new URL(fullURL);\n    console.log('🔍 getBackendOutput: URL验证通过');\n  } catch (error) {\n    console.error('🔍 getBackendOutput: URL验证失败:', error);\n    throw new Error(`无效的URL: ${fullURL}`);\n  }\n  return instance.get(requestURL, {\n    // 移除可能导致CORS问题的请求头\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  });\n}\nexport function getStepProgress() {\n  // 参与方后端没有实现这个端点，返回默认进度\n  return Promise.resolve({\n    data: {\n      type: 'keygen_progress',\n      step: 'completed',\n      status: 'success',\n      message: '密钥生成完成',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\n// 获取所有参与方的配置信息\nexport function getAllParticipantsConfig() {\n  // 如果参与方后端没有实现这个端点，返回默认配置\n  return Promise.resolve({\n    data: {\n      participants: [{\n        id: 1,\n        name: '参与方1',\n        frontend_port: 8030,\n        backend_port: 8083,\n        status: 'offline'\n      }, {\n        id: 2,\n        name: '参与方2',\n        frontend_port: 8031,\n        backend_port: 8082,\n        status: 'offline'\n      }, {\n        id: 3,\n        name: '参与方3',\n        frontend_port: 8032,\n        backend_port: 8081,\n        status: 'online'\n      }]\n    }\n  });\n}\n\n// 获取协调器状态（包含所有参与方的在线状态）\nexport function getCoordinatorStatus() {\n  // 直接访问协调器，修正端口为8060\n  const coordinatorInstance = axios.create({\n    baseURL: 'http://localhost:8060',\n    timeout: 10000\n  });\n  return coordinatorInstance.get('/api/coordinator/status').catch(() => {\n    // 如果协调器不可用，返回默认状态\n    return Promise.resolve({\n      data: {\n        expected_participants: 3,\n        registered_participants: 0,\n        online_participants: 0,\n        data_split_type: 'vertical',\n        status: 'not_initialized',\n        participants: [],\n        coordinator_ip: 'localhost',\n        coordinator_port: '8060',\n        start_time: ''\n      }\n    });\n  });\n}\n\n// 获取当前参与方信息\nexport function getCurrentParticipantInfo() {\n  const port = window.location.port || '8030';\n  const backendPort = getBackendPort();\n  let name = '参与方1';\n  let color = '#2563eb';\n  if (port === '8031') {\n    name = '参与方2';\n    color = '#dc2626';\n  } else if (port === '8032') {\n    name = '参与方3';\n    color = '#059669';\n  }\n  return {\n    id: parseInt(port.slice(-1)),\n    name,\n    port: parseInt(port),\n    backendPort: parseInt(backendPort),\n    color\n  };\n}\n\n// 获取当前参与方完整信息（包括从后端获取的信息）\nexport async function getCurrentParticipantFullInfo() {\n  try {\n    const statusResponse = await getSelfStatus();\n    const currentInfo = getCurrentParticipantInfo();\n    return {\n      ...currentInfo,\n      ip: statusResponse.data.ip,\n      status: statusResponse.data.status,\n      dataSplit: statusResponse.data.data_split\n    };\n  } catch (error) {\n    console.warn('获取参与方完整信息失败，使用基本信息:', error);\n    return getCurrentParticipantInfo();\n  }\n}","map":{"version":3,"names":["axios","env","currentBaseURL","getBackendPort","backendPort","BACKEND_PORT","process","VUE_APP_BACKEND_PORT","window","urlParams","URLSearchParams","location","search","get","frontendPort","port","trim","console","warn","portNum","parseInt","isNaN","log","env_BACKEND_PORT","process_env_VUE_APP_BACKEND_PORT","window_BACKEND_PORT","getBaseURL","error","URL","updateBaseURL","newPort","newBaseURL","instance","defaults","baseURL","create","maxHeaderSize","timeout","responseType","maxContentLength","maxBodyLength","interceptors","request","use","config","currentURL","headers","Cookie","method","toUpperCase","url","Promise","reject","response","status","message","code","ports","testURL","testResponse","fetch","ok","originalConfig","testError","getSelfStatus","getOnlineStatus","resolve","data","online_participants","expected_participants","online_percentage","min_participants","can_proceed","online_timeout","heartbeat_interval","participants","id","last_heartbeat","Date","toISOString","getBackendOutput","FRONTEND_PORT","COORDINATOR_PORT","requestURL","fullURL","Error","getStepProgress","type","step","timestamp","getAllParticipantsConfig","name","frontend_port","backend_port","getCoordinatorStatus","coordinatorInstance","catch","registered_participants","data_split_type","coordinator_ip","coordinator_port","start_time","getCurrentParticipantInfo","color","slice","getCurrentParticipantFullInfo","statusResponse","currentInfo","ip","dataSplit","data_split"],"sources":["E:/大三下学习资料/项目实训/MPHEDevCombine/MPHEDevFrontEnd/ParticipantFrontEnd/encryption/src/api/participant.js"],"sourcesContent":["import axios from 'axios'\nimport env from '../config/env'\n\n// 全局baseURL配置\nlet currentBaseURL = null\n\n// 从环境变量获取后端端口，如果没有则使用默认值\nconst getBackendPort = () => {\n  // 优先使用环境变量配置（支持多种方式）\n  let backendPort = env.BACKEND_PORT || \n                   process.env.VUE_APP_BACKEND_PORT ||\n                   window.BACKEND_PORT\n  \n  // 如果环境变量没有设置，尝试从URL参数获取\n  if (!backendPort) {\n    const urlParams = new URLSearchParams(window.location.search)\n    backendPort = urlParams.get('backendPort')\n  }\n  \n  // 如果都没有，根据前端端口推断后端端口\n  if (!backendPort) {\n    const frontendPort = window.location.port || '8030'\n    switch (frontendPort) {\n      case '8030':\n        backendPort = '8083'\n        break\n      case '8031':\n        backendPort = '8082'\n        break\n      case '8032':\n        backendPort = '8081'\n        break\n      default:\n        backendPort = '8083' // 默认端口\n    }\n  }\n  \n  // 确保端口号是有效的数字字符串\n  if (!backendPort || typeof backendPort !== 'string' || backendPort.trim() === '') {\n    console.warn('无效的后端端口:', backendPort, '使用默认端口8083')\n    backendPort = '8083'\n  }\n  \n  // 验证端口号是否为有效数字\n  const portNum = parseInt(backendPort, 10)\n  if (isNaN(portNum) || portNum < 1 || portNum > 65535) {\n    console.warn('端口号超出范围:', backendPort, '使用默认端口8083')\n    backendPort = '8083'\n  }\n  \n  console.log('🔍 getBackendPort: 获取到的后端端口:', backendPort)\n  console.log('🔍 getBackendPort: 环境变量:', {\n    env_BACKEND_PORT: env.BACKEND_PORT,\n    process_env_VUE_APP_BACKEND_PORT: process.env.VUE_APP_BACKEND_PORT,\n    window_BACKEND_PORT: window.BACKEND_PORT\n  })\n  \n  return backendPort\n}\n\n// 获取当前baseURL\nconst getBaseURL = () => {\n  if (!currentBaseURL) {\n    const backendPort = getBackendPort()\n    \n    // 确保端口号有效\n    if (!backendPort || isNaN(parseInt(backendPort, 10))) {\n      console.error('无效的后端端口:', backendPort)\n      currentBaseURL = 'http://localhost:8083'\n    } else {\n      currentBaseURL = `http://localhost:${backendPort}`\n    }\n    \n    // 验证URL是否有效\n    try {\n      new URL(currentBaseURL)\n      console.log('设置baseURL:', currentBaseURL)\n    } catch (error) {\n      console.error('无效的baseURL:', currentBaseURL, error)\n      currentBaseURL = 'http://localhost:8083'\n      console.log('使用默认baseURL:', currentBaseURL)\n    }\n  }\n  return currentBaseURL\n}\n\n// 更新baseURL\nconst updateBaseURL = (newPort) => {\n  if (newPort && newPort !== getBackendPort()) {\n    // 验证新端口号\n    const portNum = parseInt(newPort, 10)\n    if (isNaN(portNum) || portNum < 1 || portNum > 65535) {\n      console.warn('无效的新端口号:', newPort)\n      return\n    }\n    \n    const newBaseURL = `http://localhost:${newPort}`\n    \n    // 验证新URL是否有效\n    try {\n      new URL(newBaseURL)\n      currentBaseURL = newBaseURL\n      instance.defaults.baseURL = currentBaseURL\n      console.log('更新baseURL为:', currentBaseURL)\n    } catch (error) {\n      console.error('无效的新baseURL:', newBaseURL, error)\n    }\n  }\n}\n\n// 创建axios实例\nconst instance = axios.create({\n  baseURL: getBaseURL(),\n  // 设置请求头大小限制\n  maxHeaderSize: 8192,\n  // 设置超时时间\n  timeout: 30000, // 增加超时时间到30秒\n  // 设置响应类型\n  responseType: 'json',\n  // 设置最大内容长度\n  maxContentLength: 50 * 1024 * 1024, // 50MB\n  maxBodyLength: 50 * 1024 * 1024, // 50MB\n})\n\nconsole.log('API实例已创建，baseURL:', instance.defaults.baseURL)\n\n// 请求拦截器：动态更新baseURL和清理请求头\ninstance.interceptors.request.use(\n  (config) => {\n    // 确保baseURL是最新的\n    const currentURL = getBaseURL()\n    if (config.baseURL !== currentURL) {\n      config.baseURL = currentURL\n    }\n    \n    // 移除可能导致431错误的请求头\n    if (config.headers) {\n      // 移除Cookie头，避免431错误\n      delete config.headers.Cookie\n      // 移除其他可能导致问题的头\n      delete config.headers['X-Powered-By']\n      delete config.headers['X-Requested-With']\n    }\n    \n    console.log('发送请求:', config.method?.toUpperCase(), config.url, '到', config.baseURL)\n    return config\n  },\n  (error) => {\n    console.error('请求拦截器错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器：处理错误和重试逻辑\ninstance.interceptors.response.use(\n  (response) => {\n    console.log('API响应成功:', response.config.url, response.status)\n    return response\n  },\n  async (error) => {\n    console.error('API响应错误:', error.config?.url, error.message)\n    \n    // 如果是网络错误，尝试重新检测端口\n    if (error.code === 'ERR_NETWORK' || error.code === 'ECONNREFUSED') {\n      console.log('检测到网络错误，尝试重新检测后端端口...')\n      \n      // 尝试不同的端口\n      const ports = ['8083', '8082', '8081', '8084', '8085']\n      for (const port of ports) {\n        try {\n          const testURL = `http://localhost:${port}/status`\n          console.log('测试端口:', port, testURL)\n          \n          const testResponse = await fetch(testURL, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' },\n            timeout: 3000\n          })\n          \n          if (testResponse.ok) {\n            console.log('找到可用端口:', port)\n            updateBaseURL(port)\n            // 重新发送原始请求\n            const originalConfig = error.config\n            originalConfig.baseURL = getBaseURL()\n            return instance.request(originalConfig)\n          }\n        } catch (testError) {\n          console.log('端口', port, '不可用:', testError.message)\n        }\n      }\n    }\n    \n    return Promise.reject(error)\n  }\n)\n\nexport async function getSelfStatus() {\n  // 使用参与方后端实际实现的端点\n  return instance.get('/status')\n}\n\nexport function getOnlineStatus() {\n  // 参与方后端没有实现这个端点，返回默认状态\n  return Promise.resolve({\n    data: {\n      online_participants: 3,\n      expected_participants: 3,\n      online_percentage: 100,\n      min_participants: 2,\n      can_proceed: true,\n      online_timeout: 30,\n      heartbeat_interval: 5,\n      participants: [\n        {\n          id: 1,\n          url: \"http://localhost:8083\",\n          status: \"online\",\n          last_heartbeat: new Date().toISOString()\n        },\n        {\n          id: 2,\n          url: \"http://localhost:8082\", \n          status: \"online\",\n          last_heartbeat: new Date().toISOString()\n        },\n        {\n          id: 3,\n          url: \"http://localhost:8081\",\n          status: \"online\", \n          last_heartbeat: new Date().toISOString()\n        }\n      ]\n    }\n  })\n}\n\nexport async function getBackendOutput() {\n  console.log('🔍 getBackendOutput: 开始调用')\n  console.log('🔍 getBackendOutput: 当前baseURL:', getBaseURL())\n  console.log('🔍 getBackendOutput: 实例baseURL:', instance.defaults.baseURL)\n  console.log('🔍 getBackendOutput: 环境变量:', {\n    BACKEND_PORT: env.BACKEND_PORT,\n    FRONTEND_PORT: env.FRONTEND_PORT,\n    COORDINATOR_PORT: env.COORDINATOR_PORT\n  })\n  \n  const requestURL = '/api/participant/backend-output'\n  const fullURL = `${getBaseURL()}${requestURL}`\n  \n  console.log('🔍 getBackendOutput: 请求URL:', requestURL)\n  console.log('🔍 getBackendOutput: 完整URL:', fullURL)\n  \n  // 验证URL是否有效\n  try {\n    new URL(fullURL)\n    console.log('🔍 getBackendOutput: URL验证通过')\n  } catch (error) {\n    console.error('🔍 getBackendOutput: URL验证失败:', error)\n    throw new Error(`无效的URL: ${fullURL}`)\n  }\n  \n  return instance.get(requestURL, {\n    // 移除可能导致CORS问题的请求头\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  })\n}\n\nexport function getStepProgress() {\n  // 参与方后端没有实现这个端点，返回默认进度\n  return Promise.resolve({\n    data: {\n      type: 'keygen_progress',\n      step: 'completed',\n      status: 'success',\n      message: '密钥生成完成',\n      timestamp: new Date().toISOString()\n    }\n  })\n}\n\n// 获取所有参与方的配置信息\nexport function getAllParticipantsConfig() {\n  // 如果参与方后端没有实现这个端点，返回默认配置\n  return Promise.resolve({\n    data: {\n      participants: [\n        {\n          id: 1,\n          name: '参与方1',\n          frontend_port: 8030,\n          backend_port: 8083,\n          status: 'offline'\n        },\n        {\n          id: 2,\n          name: '参与方2',\n          frontend_port: 8031,\n          backend_port: 8082,\n          status: 'offline'\n        },\n        {\n          id: 3,\n          name: '参与方3',\n          frontend_port: 8032,\n          backend_port: 8081,\n          status: 'online'\n        }\n      ]\n    }\n  })\n}\n\n// 获取协调器状态（包含所有参与方的在线状态）\nexport function getCoordinatorStatus() {\n  // 直接访问协调器，修正端口为8060\n  const coordinatorInstance = axios.create({\n    baseURL: 'http://localhost:8060',\n    timeout: 10000\n  })\n  \n  return coordinatorInstance.get('/api/coordinator/status')\n    .catch(() => {\n      // 如果协调器不可用，返回默认状态\n      return Promise.resolve({\n        data: {\n          expected_participants: 3,\n          registered_participants: 0,\n          online_participants: 0,\n          data_split_type: 'vertical',\n          status: 'not_initialized',\n          participants: [],\n          coordinator_ip: 'localhost',\n          coordinator_port: '8060',\n          start_time: ''\n        }\n      })\n    })\n}\n\n// 获取当前参与方信息\nexport function getCurrentParticipantInfo() {\n  const port = window.location.port || '8030'\n  const backendPort = getBackendPort()\n  \n  let name = '参与方1'\n  let color = '#2563eb'\n  \n  if (port === '8031') {\n    name = '参与方2'\n    color = '#dc2626'\n  } else if (port === '8032') {\n    name = '参与方3'\n    color = '#059669'\n  }\n  \n  return {\n    id: parseInt(port.slice(-1)),\n    name,\n    port: parseInt(port),\n    backendPort: parseInt(backendPort),\n    color\n  }\n}\n\n// 获取当前参与方完整信息（包括从后端获取的信息）\nexport async function getCurrentParticipantFullInfo() {\n  try {\n    const statusResponse = await getSelfStatus()\n    const currentInfo = getCurrentParticipantInfo()\n    \n    return {\n      ...currentInfo,\n      ip: statusResponse.data.ip,\n      status: statusResponse.data.status,\n      dataSplit: statusResponse.data.data_split\n    }\n  } catch (error) {\n    console.warn('获取参与方完整信息失败，使用基本信息:', error)\n    return getCurrentParticipantInfo()\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}