{"ast":null,"code":"// 环境变量配置\nconst getBackendPort = () => {\n  // 优先使用环境变量配置（支持多种方式）\n  let backendPort = process.env.BACKEND_PORT || process.env.VUE_APP_BACKEND_PORT || window.BACKEND_PORT;\n\n  // 如果环境变量没有设置，尝试从URL参数获取\n  if (!backendPort) {\n    const urlParams = new URLSearchParams(window.location.search);\n    backendPort = urlParams.get('backendPort');\n  }\n\n  // 如果都没有，根据前端端口推断后端端口\n  if (!backendPort) {\n    const frontendPort = window.location.port || '8030';\n    switch (frontendPort) {\n      case '8030':\n        backendPort = '8083';\n        break;\n      case '8031':\n        backendPort = '8082';\n        break;\n      case '8032':\n        backendPort = '8081';\n        break;\n      default:\n        backendPort = '8083';\n    }\n  }\n\n  // 确保端口号是有效的数字\n  if (!backendPort || isNaN(parseInt(backendPort, 10))) {\n    console.warn('无效的后端端口:', backendPort, '使用默认端口8083');\n    backendPort = '8083';\n  }\n  return backendPort;\n};\nconst env = {\n  // 后端端口\n  BACKEND_PORT: getBackendPort(),\n  // 前端端口\n  FRONTEND_PORT: process.env.PORT || process.env.VUE_APP_PORT || window.location.port || '8030',\n  // 协调器端口\n  COORDINATOR_PORT: '8060',\n  // API超时时间\n  API_TIMEOUT: 30000,\n  // 自动刷新间隔\n  AUTO_REFRESH_INTERVAL: 5000,\n  // 调试模式\n  DEBUG: process.env.NODE_ENV === 'development',\n  // 后端URL\n  BACKEND_URL: `http://localhost:${getBackendPort()}`,\n  // 协调器URL\n  COORDINATOR_URL: 'http://localhost:8060'\n};\n\n// 将环境变量暴露到window对象，供其他模块使用\nif (typeof window !== 'undefined') {\n  window.BACKEND_PORT = env.BACKEND_PORT;\n  window.FRONTEND_PORT = env.FRONTEND_PORT;\n  window.COORDINATOR_PORT = env.COORDINATOR_PORT;\n  window.API_TIMEOUT = env.API_TIMEOUT;\n  window.AUTO_REFRESH_INTERVAL = env.AUTO_REFRESH_INTERVAL;\n  window.DEBUG = env.DEBUG;\n  window.BACKEND_URL = env.BACKEND_URL;\n  window.COORDINATOR_URL = env.COORDINATOR_URL;\n\n  // 添加调试信息\n  console.log('🔧 环境配置:', {\n    前端端口: env.FRONTEND_PORT,\n    后端端口: env.BACKEND_PORT,\n    后端URL: env.BACKEND_URL,\n    协调器端口: env.COORDINATOR_PORT,\n    协调器URL: env.COORDINATOR_URL,\n    调试模式: env.DEBUG,\n    环境变量: {\n      BACKEND_PORT: process.env.BACKEND_PORT,\n      VUE_APP_BACKEND_PORT: process.env.VUE_APP_BACKEND_PORT,\n      PORT: process.env.PORT,\n      VUE_APP_PORT: process.env.VUE_APP_PORT\n    }\n  });\n}\nexport default env;","map":{"version":3,"names":["getBackendPort","backendPort","process","env","BACKEND_PORT","VUE_APP_BACKEND_PORT","window","urlParams","URLSearchParams","location","search","get","frontendPort","port","isNaN","parseInt","console","warn","FRONTEND_PORT","PORT","VUE_APP_PORT","COORDINATOR_PORT","API_TIMEOUT","AUTO_REFRESH_INTERVAL","DEBUG","NODE_ENV","BACKEND_URL","COORDINATOR_URL","log","前端端口","后端端口","后端URL","协调器端口","协调器URL","调试模式","环境变量"],"sources":["E:/大三下学习资料/项目实训/MPHEDevCombine/MPHEDevFrontEnd/ParticipantFrontEnd/encryption/src/config/env.js"],"sourcesContent":["// 环境变量配置\r\nconst getBackendPort = () => {\r\n  // 优先使用环境变量配置（支持多种方式）\r\n  let backendPort = process.env.BACKEND_PORT || \r\n                   process.env.VUE_APP_BACKEND_PORT ||\r\n                   window.BACKEND_PORT\r\n  \r\n  // 如果环境变量没有设置，尝试从URL参数获取\r\n  if (!backendPort) {\r\n    const urlParams = new URLSearchParams(window.location.search)\r\n    backendPort = urlParams.get('backendPort')\r\n  }\r\n  \r\n  // 如果都没有，根据前端端口推断后端端口\r\n  if (!backendPort) {\r\n    const frontendPort = window.location.port || '8030'\r\n    switch (frontendPort) {\r\n      case '8030': backendPort = '8083'; break\r\n      case '8031': backendPort = '8082'; break\r\n      case '8032': backendPort = '8081'; break\r\n      default: backendPort = '8083'\r\n    }\r\n  }\r\n  \r\n  // 确保端口号是有效的数字\r\n  if (!backendPort || isNaN(parseInt(backendPort, 10))) {\r\n    console.warn('无效的后端端口:', backendPort, '使用默认端口8083')\r\n    backendPort = '8083'\r\n  }\r\n  \r\n  return backendPort\r\n}\r\n\r\nconst env = {\r\n  // 后端端口\r\n  BACKEND_PORT: getBackendPort(),\r\n  \r\n  // 前端端口\r\n  FRONTEND_PORT: process.env.PORT || \r\n                 process.env.VUE_APP_PORT || \r\n                 window.location.port || '8030',\r\n  \r\n  // 协调器端口\r\n  COORDINATOR_PORT: '8060',\r\n  \r\n  // API超时时间\r\n  API_TIMEOUT: 30000,\r\n  \r\n  // 自动刷新间隔\r\n  AUTO_REFRESH_INTERVAL: 5000,\r\n  \r\n  // 调试模式\r\n  DEBUG: process.env.NODE_ENV === 'development',\r\n  \r\n  // 后端URL\r\n  BACKEND_URL: `http://localhost:${getBackendPort()}`,\r\n  \r\n  // 协调器URL\r\n  COORDINATOR_URL: 'http://localhost:8060'\r\n}\r\n\r\n// 将环境变量暴露到window对象，供其他模块使用\r\nif (typeof window !== 'undefined') {\r\n  window.BACKEND_PORT = env.BACKEND_PORT\r\n  window.FRONTEND_PORT = env.FRONTEND_PORT\r\n  window.COORDINATOR_PORT = env.COORDINATOR_PORT\r\n  window.API_TIMEOUT = env.API_TIMEOUT\r\n  window.AUTO_REFRESH_INTERVAL = env.AUTO_REFRESH_INTERVAL\r\n  window.DEBUG = env.DEBUG\r\n  window.BACKEND_URL = env.BACKEND_URL\r\n  window.COORDINATOR_URL = env.COORDINATOR_URL\r\n  \r\n  // 添加调试信息\r\n  console.log('🔧 环境配置:', {\r\n    前端端口: env.FRONTEND_PORT,\r\n    后端端口: env.BACKEND_PORT,\r\n    后端URL: env.BACKEND_URL,\r\n    协调器端口: env.COORDINATOR_PORT,\r\n    协调器URL: env.COORDINATOR_URL,\r\n    调试模式: env.DEBUG,\r\n    环境变量: {\r\n      BACKEND_PORT: process.env.BACKEND_PORT,\r\n      VUE_APP_BACKEND_PORT: process.env.VUE_APP_BACKEND_PORT,\r\n      PORT: process.env.PORT,\r\n      VUE_APP_PORT: process.env.VUE_APP_PORT\r\n    }\r\n  })\r\n}\r\n\r\nexport default env "],"mappings":"AAAA;AACA,MAAMA,cAAc,GAAGA,CAAA,KAAM;EAC3B;EACA,IAAIC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,YAAY,IACzBF,OAAO,CAACC,GAAG,CAACE,oBAAoB,IAChCC,MAAM,CAACF,YAAY;;EAEpC;EACA,IAAI,CAACH,WAAW,EAAE;IAChB,MAAMM,SAAS,GAAG,IAAIC,eAAe,CAACF,MAAM,CAACG,QAAQ,CAACC,MAAM,CAAC;IAC7DT,WAAW,GAAGM,SAAS,CAACI,GAAG,CAAC,aAAa,CAAC;EAC5C;;EAEA;EACA,IAAI,CAACV,WAAW,EAAE;IAChB,MAAMW,YAAY,GAAGN,MAAM,CAACG,QAAQ,CAACI,IAAI,IAAI,MAAM;IACnD,QAAQD,YAAY;MAClB,KAAK,MAAM;QAAEX,WAAW,GAAG,MAAM;QAAE;MACnC,KAAK,MAAM;QAAEA,WAAW,GAAG,MAAM;QAAE;MACnC,KAAK,MAAM;QAAEA,WAAW,GAAG,MAAM;QAAE;MACnC;QAASA,WAAW,GAAG,MAAM;IAC/B;EACF;;EAEA;EACA,IAAI,CAACA,WAAW,IAAIa,KAAK,CAACC,QAAQ,CAACd,WAAW,EAAE,EAAE,CAAC,CAAC,EAAE;IACpDe,OAAO,CAACC,IAAI,CAAC,UAAU,EAAEhB,WAAW,EAAE,YAAY,CAAC;IACnDA,WAAW,GAAG,MAAM;EACtB;EAEA,OAAOA,WAAW;AACpB,CAAC;AAED,MAAME,GAAG,GAAG;EACV;EACAC,YAAY,EAAEJ,cAAc,CAAC,CAAC;EAE9B;EACAkB,aAAa,EAAEhB,OAAO,CAACC,GAAG,CAACgB,IAAI,IAChBjB,OAAO,CAACC,GAAG,CAACiB,YAAY,IACxBd,MAAM,CAACG,QAAQ,CAACI,IAAI,IAAI,MAAM;EAE7C;EACAQ,gBAAgB,EAAE,MAAM;EAExB;EACAC,WAAW,EAAE,KAAK;EAElB;EACAC,qBAAqB,EAAE,IAAI;EAE3B;EACAC,KAAK,EAAEtB,OAAO,CAACC,GAAG,CAACsB,QAAQ,KAAK,aAAa;EAE7C;EACAC,WAAW,EAAE,oBAAoB1B,cAAc,CAAC,CAAC,EAAE;EAEnD;EACA2B,eAAe,EAAE;AACnB,CAAC;;AAED;AACA,IAAI,OAAOrB,MAAM,KAAK,WAAW,EAAE;EACjCA,MAAM,CAACF,YAAY,GAAGD,GAAG,CAACC,YAAY;EACtCE,MAAM,CAACY,aAAa,GAAGf,GAAG,CAACe,aAAa;EACxCZ,MAAM,CAACe,gBAAgB,GAAGlB,GAAG,CAACkB,gBAAgB;EAC9Cf,MAAM,CAACgB,WAAW,GAAGnB,GAAG,CAACmB,WAAW;EACpChB,MAAM,CAACiB,qBAAqB,GAAGpB,GAAG,CAACoB,qBAAqB;EACxDjB,MAAM,CAACkB,KAAK,GAAGrB,GAAG,CAACqB,KAAK;EACxBlB,MAAM,CAACoB,WAAW,GAAGvB,GAAG,CAACuB,WAAW;EACpCpB,MAAM,CAACqB,eAAe,GAAGxB,GAAG,CAACwB,eAAe;;EAE5C;EACAX,OAAO,CAACY,GAAG,CAAC,UAAU,EAAE;IACtBC,IAAI,EAAE1B,GAAG,CAACe,aAAa;IACvBY,IAAI,EAAE3B,GAAG,CAACC,YAAY;IACtB2B,KAAK,EAAE5B,GAAG,CAACuB,WAAW;IACtBM,KAAK,EAAE7B,GAAG,CAACkB,gBAAgB;IAC3BY,MAAM,EAAE9B,GAAG,CAACwB,eAAe;IAC3BO,IAAI,EAAE/B,GAAG,CAACqB,KAAK;IACfW,IAAI,EAAE;MACJ/B,YAAY,EAAEF,OAAO,CAACC,GAAG,CAACC,YAAY;MACtCC,oBAAoB,EAAEH,OAAO,CAACC,GAAG,CAACE,oBAAoB;MACtDc,IAAI,EAAEjB,OAAO,CAACC,GAAG,CAACgB,IAAI;MACtBC,YAAY,EAAElB,OAAO,CAACC,GAAG,CAACiB;IAC5B;EACF,CAAC,CAAC;AACJ;AAEA,eAAejB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}