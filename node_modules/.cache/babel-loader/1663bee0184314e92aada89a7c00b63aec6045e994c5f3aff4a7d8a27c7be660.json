{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref } from 'vue';\nimport { getSelfStatus, collaborativeDecrypt as collaborativeDecryptApi, collaborativeRefresh as collaborativeRefreshApi } from './api/participant';\nimport OnlineStatus from './components/OnlineStatus.vue';\nexport default {\n  __name: 'App',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const ws = ref(null);\n    const wsStatus = ref('未连接');\n    const ipPush = ref(null);\n    const keygenProgress = ref(null);\n    const coordinatorIP = ref('');\n    const coordinatorPushMsg = ref('');\n    const registerMsg = ref('');\n    function connectWS() {\n      if (ws.value) ws.value.close();\n      ws.value = new WebSocket('ws://localhost:8061/api/participant/ws');\n      ws.value.onopen = () => {\n        wsStatus.value = '已连接';\n      };\n      ws.value.onclose = () => {\n        wsStatus.value = '已断开';\n      };\n      ws.value.onerror = () => {\n        wsStatus.value = '连接错误';\n      };\n      ws.value.onmessage = event => {\n        const msg = JSON.parse(event.data);\n        if (msg.type === 'ip') {\n          ipPush.value = msg;\n          coordinatorPushMsg.value = '本机IP已推送到协调器';\n        } else if (msg.type === 'keygen_progress') {\n          keygenProgress.value = msg;\n        } else if (msg.type === 'register') {\n          registerMsg.value = msg.message || '注册成功';\n        }\n      };\n    }\n    function sendCoordinatorIP() {\n      if (ws.value && ws.value.readyState === 1) {\n        ws.value.send(JSON.stringify({\n          type: 'coordinator_ip',\n          coordinator_ip: coordinatorIP.value\n        }));\n        coordinatorPushMsg.value = '已发送，等待协调器响应...';\n      } else {\n        coordinatorPushMsg.value = '请先连接WebSocket';\n      }\n    }\n\n    // 自身状态\n    const selfStatus = ref('');\n    async function fetchSelfStatus() {\n      const res = await getSelfStatus();\n      selfStatus.value = JSON.stringify(res.data, null, 2);\n    }\n\n    // 协同解密/刷新\n    const ciphertext = ref('');\n    const targetParticipants = ref('');\n    const collabResp = ref('');\n    async function collaborativeDecrypt() {\n      const ids = targetParticipants.value.split(',').map(s => parseInt(s)).filter(Boolean);\n      const res = await collaborativeDecryptApi({\n        ciphertext: ciphertext.value,\n        target_participants: ids\n      });\n      collabResp.value = JSON.stringify(res.data, null, 2);\n    }\n    async function collaborativeRefresh() {\n      const ids = targetParticipants.value.split(',').map(s => parseInt(s)).filter(Boolean);\n      const res = await collaborativeRefreshApi({\n        ciphertext: ciphertext.value,\n        target_participants: ids\n      });\n      collabResp.value = JSON.stringify(res.data, null, 2);\n    }\n    const __returned__ = {\n      ws,\n      wsStatus,\n      ipPush,\n      keygenProgress,\n      coordinatorIP,\n      coordinatorPushMsg,\n      registerMsg,\n      connectWS,\n      sendCoordinatorIP,\n      selfStatus,\n      fetchSelfStatus,\n      ciphertext,\n      targetParticipants,\n      collabResp,\n      collaborativeDecrypt,\n      collaborativeRefresh,\n      ref,\n      get getSelfStatus() {\n        return getSelfStatus;\n      },\n      get collaborativeDecryptApi() {\n        return collaborativeDecryptApi;\n      },\n      get collaborativeRefreshApi() {\n        return collaborativeRefreshApi;\n      },\n      OnlineStatus\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","getSelfStatus","collaborativeDecrypt","collaborativeDecryptApi","collaborativeRefresh","collaborativeRefreshApi","OnlineStatus","ws","wsStatus","ipPush","keygenProgress","coordinatorIP","coordinatorPushMsg","registerMsg","connectWS","value","close","WebSocket","onopen","onclose","onerror","onmessage","event","msg","JSON","parse","data","type","message","sendCoordinatorIP","readyState","send","stringify","coordinator_ip","selfStatus","fetchSelfStatus","res","ciphertext","targetParticipants","collabResp","ids","split","map","s","parseInt","filter","Boolean","target_participants"],"sources":["D:/down/MPHEDEV/encryption_par/src/App.vue"],"sourcesContent":["<template>\n  <div style=\"padding: 24px; max-width: 800px; margin: auto;\">\n    <h2>参与方首页</h2>\n    <div style=\"margin-bottom: 16px;\">\n      <label>协调器IP: </label>\n      <input v-model=\"coordinatorIP\" placeholder=\"输入协调器IP\" style=\"width: 180px;\" />\n      <button @click=\"sendCoordinatorIP\">推送本机IP</button>\n      <span v-if=\"coordinatorPushMsg\">{{ coordinatorPushMsg }}</span>\n    </div>\n    <div style=\"margin-bottom: 16px;\">\n      <button @click=\"connectWS\">连接WebSocket</button>\n      <span v-if=\"wsStatus\">({{ wsStatus }})</span>\n    </div>\n    <div v-if=\"ipPush\">\n      <h3>本机信息</h3>\n      <div>本机IP: {{ ipPush.ip }}</div>\n      <div>本机端口: {{ ipPush.port }}</div>\n    </div>\n    <div v-if=\"registerMsg\">\n      <div>注册状态: {{ registerMsg }}</div>\n    </div>\n    <div v-if=\"keygenProgress\">\n      <h3>密钥生成进度</h3>\n      <div>步骤: {{ keygenProgress.step }}</div>\n      <div>状态: {{ keygenProgress.status }}</div>\n      <div>说明: {{ keygenProgress.message }}</div>\n      <div>时间: {{ keygenProgress.timestamp }}</div>\n    </div>\n    <div style=\"margin-top: 16px;\">\n      <h3>自身状态</h3>\n      <button @click=\"fetchSelfStatus\">查询</button>\n      <div v-if=\"selfStatus\">\n        <pre>{{ selfStatus }}</pre>\n      </div>\n    </div>\n    <div style=\"margin-top: 16px;\">\n      <h3>所有参与方在线状态</h3>\n      <OnlineStatus />\n    </div>\n    <div style=\"margin-top: 16px;\">\n      <h3>协同解密/刷新请求</h3>\n      <input v-model=\"ciphertext\" placeholder=\"密文 ciphertext\" style=\"width: 300px;\" />\n      <input v-model=\"targetParticipants\" placeholder=\"目标参与方ID,逗号分隔\" style=\"width: 180px;\" />\n      <button @click=\"collaborativeDecrypt\">协同解密</button>\n      <button @click=\"collaborativeRefresh\">协同刷新</button>\n      <div v-if=\"collabResp\">\n        <pre>{{ collabResp }}</pre>\n      </div>\n    </div>\n  </div>\n</template>\n<script setup>\nimport { ref } from 'vue'\nimport {\n  getSelfStatus,\n  collaborativeDecrypt as collaborativeDecryptApi,\n  collaborativeRefresh as collaborativeRefreshApi\n} from './api/participant'\nimport OnlineStatus from './components/OnlineStatus.vue'\n\nconst ws = ref(null)\nconst wsStatus = ref('未连接')\nconst ipPush = ref(null)\nconst keygenProgress = ref(null)\nconst coordinatorIP = ref('')\nconst coordinatorPushMsg = ref('')\nconst registerMsg = ref('')\n\nfunction connectWS() {\n  if (ws.value) ws.value.close()\n  ws.value = new WebSocket('ws://localhost:8061/api/participant/ws')\n  ws.value.onopen = () => { wsStatus.value = '已连接' }\n  ws.value.onclose = () => { wsStatus.value = '已断开' }\n  ws.value.onerror = () => { wsStatus.value = '连接错误' }\n  ws.value.onmessage = (event) => {\n    const msg = JSON.parse(event.data)\n    if (msg.type === 'ip') {\n      ipPush.value = msg\n      coordinatorPushMsg.value = '本机IP已推送到协调器'\n    } else if (msg.type === 'keygen_progress') {\n      keygenProgress.value = msg\n    } else if (msg.type === 'register') {\n      registerMsg.value = msg.message || '注册成功'\n    }\n  }\n}\n\nfunction sendCoordinatorIP() {\n  if (ws.value && ws.value.readyState === 1) {\n    ws.value.send(JSON.stringify({\n      type: 'coordinator_ip',\n      coordinator_ip: coordinatorIP.value\n    }))\n    coordinatorPushMsg.value = '已发送，等待协调器响应...'\n  } else {\n    coordinatorPushMsg.value = '请先连接WebSocket'\n  }\n}\n\n// 自身状态\nconst selfStatus = ref('')\nasync function fetchSelfStatus() {\n  const res = await getSelfStatus()\n  selfStatus.value = JSON.stringify(res.data, null, 2)\n}\n\n// 协同解密/刷新\nconst ciphertext = ref('')\nconst targetParticipants = ref('')\nconst collabResp = ref('')\nasync function collaborativeDecrypt() {\n  const ids = targetParticipants.value.split(',').map(s => parseInt(s)).filter(Boolean)\n  const res = await collaborativeDecryptApi({\n    ciphertext: ciphertext.value,\n    target_participants: ids\n  })\n  collabResp.value = JSON.stringify(res.data, null, 2)\n}\nasync function collaborativeRefresh() {\n  const ids = targetParticipants.value.split(',').map(s => parseInt(s)).filter(Boolean)\n  const res = await collaborativeRefreshApi({\n    ciphertext: ciphertext.value,\n    target_participants: ids\n  })\n  collabResp.value = JSON.stringify(res.data, null, 2)\n}\n</script> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}