{"ast":null,"code":"import { ref, onMounted, computed } from 'vue';\nimport { getCoordinatorStatus, getCurrentParticipantInfo } from '../api/participant.js';\nexport default {\n  __name: 'OnlineStatus',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const loading = ref(false);\n    const statusData = ref(null);\n    const error = ref(null);\n\n    // 获取当前参与方信息\n    const currentParticipant = getCurrentParticipantInfo();\n\n    // 计算属性\n    const onlineCount = computed(() => statusData.value?.online_participants || 0);\n    const totalCount = computed(() => statusData.value?.expected_participants || 0);\n    const onlinePercentage = computed(() => {\n      if (totalCount.value === 0) return 0;\n      return Math.round(onlineCount.value / totalCount.value * 100);\n    });\n    const canProceed = computed(() => {\n      // 根据在线参与方数量判断是否可以协作\n      return onlineCount.value >= 2; // 至少需要2个参与方在线\n    });\n    const participants = computed(() => statusData.value?.participants || []);\n    const onlineTimeout = computed(() => statusData.value?.online_timeout || 30);\n    const heartbeatInterval = computed(() => statusData.value?.heartbeat_interval || 5);\n    const minParticipants = computed(() => statusData.value?.min_participants || 2);\n\n    // 获取参与方名称\n    const getParticipantName = id => {\n      const names = {\n        1: '参与方1',\n        2: '参与方2',\n        3: '参与方3'\n      };\n      return names[id] || `参与方${id}`;\n    };\n\n    // 获取后端端口\n    const getBackendPort = url => {\n      if (!url) return '未知';\n      const match = url.match(/:(\\d+)$/);\n      return match ? match[1] : '未知';\n    };\n\n    // 格式化最后心跳时间\n    const formatLastHeartbeat = timestamp => {\n      if (!timestamp) return '未知';\n      const lastHeartbeat = new Date(timestamp);\n      const now = new Date();\n      const diffMs = now - lastHeartbeat;\n      const diffSeconds = Math.floor(diffMs / 1000);\n      const diffMinutes = Math.floor(diffSeconds / 60);\n      if (diffSeconds < 60) {\n        return `${diffSeconds}秒前`;\n      } else if (diffMinutes < 60) {\n        return `${diffMinutes}分钟前`;\n      } else {\n        const diffHours = Math.floor(diffMinutes / 60);\n        return `${diffHours}小时前`;\n      }\n    };\n\n    // 判断是否为当前参与方\n    const isCurrentParticipant = id => {\n      return id === currentParticipant.id;\n    };\n\n    // 刷新状态\n    const refreshStatus = async () => {\n      loading.value = true;\n      error.value = null;\n      try {\n        const response = await getCoordinatorStatus();\n        statusData.value = response.data;\n      } catch (err) {\n        console.error('获取在线状态失败:', err);\n        error.value = '无法连接到后端服务，请检查后端是否正在运行';\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 组件挂载时获取状态\n    onMounted(() => {\n      refreshStatus();\n\n      // 每30秒自动刷新一次\n      setInterval(() => {\n        if (!loading.value && !error.value) {\n          refreshStatus();\n        }\n      }, 30000);\n    });\n    const __returned__ = {\n      loading,\n      statusData,\n      error,\n      currentParticipant,\n      onlineCount,\n      totalCount,\n      onlinePercentage,\n      canProceed,\n      participants,\n      onlineTimeout,\n      heartbeatInterval,\n      minParticipants,\n      getParticipantName,\n      getBackendPort,\n      formatLastHeartbeat,\n      isCurrentParticipant,\n      refreshStatus,\n      ref,\n      onMounted,\n      computed,\n      get getCoordinatorStatus() {\n        return getCoordinatorStatus;\n      },\n      get getCurrentParticipantInfo() {\n        return getCurrentParticipantInfo;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","getCoordinatorStatus","getCurrentParticipantInfo","loading","statusData","error","currentParticipant","onlineCount","value","online_participants","totalCount","expected_participants","onlinePercentage","Math","round","canProceed","participants","onlineTimeout","online_timeout","heartbeatInterval","heartbeat_interval","minParticipants","min_participants","getParticipantName","id","names","getBackendPort","url","match","formatLastHeartbeat","timestamp","lastHeartbeat","Date","now","diffMs","diffSeconds","floor","diffMinutes","diffHours","isCurrentParticipant","refreshStatus","response","data","err","console","setInterval"],"sources":["E:/大三下学习资料/项目实训/MPHEDevCombine/MPHEDevFrontEnd/ParticipantFrontEnd/encryption/src/components/OnlineStatus.vue"],"sourcesContent":["<template>\r\n  <div class=\"online-status\">\r\n    <!-- 在线状态概览 -->\r\n    <div class=\"status-overview\">\r\n      <div class=\"overview-item\">\r\n        <div class=\"overview-icon\">👥</div>\r\n        <div class=\"overview-content\">\r\n          <div class=\"overview-label\">在线参与方</div>\r\n          <div class=\"overview-value\">{{ onlineCount }}/{{ totalCount }}</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"overview-item\">\r\n        <div class=\"overview-icon\">📊</div>\r\n        <div class=\"overview-content\">\r\n          <div class=\"overview-label\">在线率</div>\r\n          <div class=\"overview-value\">{{ onlinePercentage }}%</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"overview-item\">\r\n        <div class=\"overview-icon\">✅</div>\r\n        <div class=\"overview-content\">\r\n          <div class=\"overview-label\">可协作</div>\r\n          <div class=\"overview-value\">{{ canProceed ? '是' : '否' }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 错误状态显示 -->\r\n    <div v-if=\"error\" class=\"error-message\">\r\n      <div class=\"error-icon\">⚠️</div>\r\n      <div class=\"error-content\">\r\n        <h4 class=\"error-title\">无法获取在线状态</h4>\r\n        <p class=\"error-text\">{{ error }}</p>\r\n        <button @click=\"refreshStatus\" class=\"retry-btn\">\r\n          <span class=\"retry-icon\">🔄</span>\r\n          <span class=\"retry-text\">重试</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 参与方状态列表 -->\r\n    <div v-else class=\"participants-list\">\r\n      <div class=\"list-header\">\r\n        <h4 class=\"list-title\">参与方状态详情</h4>\r\n        <button @click=\"refreshStatus\" class=\"refresh-btn\" :disabled=\"loading\">\r\n          <span class=\"refresh-icon\">🔄</span>\r\n          <span class=\"refresh-text\">{{ loading ? '刷新中...' : '刷新' }}</span>\r\n        </button>\r\n      </div>\r\n      \r\n      <div class=\"participants-grid\">\r\n        <div \r\n          v-for=\"participant in participants\" \r\n          :key=\"participant.id\"\r\n          class=\"participant-card\"\r\n          :class=\"{ \r\n            'current-participant': isCurrentParticipant(participant.id),\r\n            'online': participant.status === 'online',\r\n            'offline': participant.status === 'offline'\r\n          }\"\r\n        >\r\n          <div class=\"participant-header\">\r\n            <div class=\"participant-info\">\r\n              <div class=\"participant-name\">{{ getParticipantName(participant.id) }}</div>\r\n              <div class=\"participant-id\">ID: {{ participant.id }}</div>\r\n            </div>\r\n            <div class=\"status-indicator\">\r\n              <div class=\"status-dot\" :class=\"participant.status\"></div>\r\n              <span class=\"status-text\">{{ participant.status === 'online' ? '在线' : '离线' }}</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"participant-details\">\r\n            <div class=\"detail-item\">\r\n              <span class=\"detail-label\">后端端口:</span>\r\n              <span class=\"detail-value\">{{ getBackendPort(participant.url) }}</span>\r\n            </div>\r\n            <div class=\"detail-item\">\r\n              <span class=\"detail-label\">最后心跳:</span>\r\n              <span class=\"detail-value\">{{ formatLastHeartbeat(participant.last_heartbeat) }}</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div v-if=\"isCurrentParticipant(participant.id)\" class=\"current-badge\">\r\n            <span class=\"current-text\">当前参与方</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 系统信息 -->\r\n    <div v-if=\"!error\" class=\"system-info\">\r\n      <div class=\"info-item\">\r\n        <span class=\"info-label\">心跳超时:</span>\r\n        <span class=\"info-value\">{{ onlineTimeout }}秒</span>\r\n      </div>\r\n      <div class=\"info-item\">\r\n        <span class=\"info-label\">心跳间隔:</span>\r\n        <span class=\"info-value\">{{ heartbeatInterval }}秒</span>\r\n      </div>\r\n      <div class=\"info-item\">\r\n        <span class=\"info-label\">最小参与方:</span>\r\n        <span class=\"info-value\">{{ minParticipants }}个</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue'\r\nimport { getCoordinatorStatus, getCurrentParticipantInfo } from '../api/participant.js'\r\n\r\nconst loading = ref(false)\r\nconst statusData = ref(null)\r\nconst error = ref(null)\r\n\r\n// 获取当前参与方信息\r\nconst currentParticipant = getCurrentParticipantInfo()\r\n\r\n// 计算属性\r\nconst onlineCount = computed(() => statusData.value?.online_participants || 0)\r\nconst totalCount = computed(() => statusData.value?.expected_participants || 0)\r\nconst onlinePercentage = computed(() => {\r\n  if (totalCount.value === 0) return 0\r\n  return Math.round((onlineCount.value / totalCount.value) * 100)\r\n})\r\nconst canProceed = computed(() => {\r\n  // 根据在线参与方数量判断是否可以协作\r\n  return onlineCount.value >= 2 // 至少需要2个参与方在线\r\n})\r\nconst participants = computed(() => statusData.value?.participants || [])\r\nconst onlineTimeout = computed(() => statusData.value?.online_timeout || 30)\r\nconst heartbeatInterval = computed(() => statusData.value?.heartbeat_interval || 5)\r\nconst minParticipants = computed(() => statusData.value?.min_participants || 2)\r\n\r\n// 获取参与方名称\r\nconst getParticipantName = (id) => {\r\n  const names = {\r\n    1: '参与方1',\r\n    2: '参与方2', \r\n    3: '参与方3'\r\n  }\r\n  return names[id] || `参与方${id}`\r\n}\r\n\r\n// 获取后端端口\r\nconst getBackendPort = (url) => {\r\n  if (!url) return '未知'\r\n  const match = url.match(/:(\\d+)$/)\r\n  return match ? match[1] : '未知'\r\n}\r\n\r\n// 格式化最后心跳时间\r\nconst formatLastHeartbeat = (timestamp) => {\r\n  if (!timestamp) return '未知'\r\n  \r\n  const lastHeartbeat = new Date(timestamp)\r\n  const now = new Date()\r\n  const diffMs = now - lastHeartbeat\r\n  const diffSeconds = Math.floor(diffMs / 1000)\r\n  const diffMinutes = Math.floor(diffSeconds / 60)\r\n  \r\n  if (diffSeconds < 60) {\r\n    return `${diffSeconds}秒前`\r\n  } else if (diffMinutes < 60) {\r\n    return `${diffMinutes}分钟前`\r\n  } else {\r\n    const diffHours = Math.floor(diffMinutes / 60)\r\n    return `${diffHours}小时前`\r\n  }\r\n}\r\n\r\n// 判断是否为当前参与方\r\nconst isCurrentParticipant = (id) => {\r\n  return id === currentParticipant.id\r\n}\r\n\r\n// 刷新状态\r\nconst refreshStatus = async () => {\r\n  loading.value = true\r\n  error.value = null\r\n  \r\n  try {\r\n    const response = await getCoordinatorStatus()\r\n    statusData.value = response.data\r\n  } catch (err) {\r\n    console.error('获取在线状态失败:', err)\r\n    error.value = '无法连接到后端服务，请检查后端是否正在运行'\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 组件挂载时获取状态\r\nonMounted(() => {\r\n  refreshStatus()\r\n  \r\n  // 每30秒自动刷新一次\r\n  setInterval(() => {\r\n    if (!loading.value && !error.value) {\r\n      refreshStatus()\r\n    }\r\n  }, 30000)\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.online-status {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n}\r\n\r\n.status-overview {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.overview-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding: 15px;\r\n  background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);\r\n  border: 1px solid rgba(102, 126, 234, 0.2);\r\n  border-radius: 15px;\r\n  backdrop-filter: blur(10px);\r\n}\r\n\r\n.overview-icon {\r\n  font-size: 1.5rem;\r\n  width: 40px;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 10px;\r\n  color: white;\r\n}\r\n\r\n.overview-content {\r\n  flex: 1;\r\n}\r\n\r\n.overview-label {\r\n  font-size: 0.85rem;\r\n  color: #64748b;\r\n  font-weight: 500;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.overview-value {\r\n  font-size: 1.2rem;\r\n  font-weight: 700;\r\n  color: #1e293b;\r\n}\r\n\r\n.error-message {\r\n  background: rgba(239, 68, 68, 0.1);\r\n  border: 1px solid rgba(239, 68, 68, 0.3);\r\n  border-radius: 15px;\r\n  padding: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.error-icon {\r\n  font-size: 2rem;\r\n  color: #ef4444;\r\n}\r\n\r\n.error-content {\r\n  flex: 1;\r\n}\r\n\r\n.error-title {\r\n  margin: 0 0 8px 0;\r\n  color: #ef4444;\r\n  font-size: 1.1rem;\r\n  font-weight: 700;\r\n}\r\n\r\n.error-text {\r\n  margin: 0 0 15px 0;\r\n  color: #64748b;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.retry-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 8px 16px;\r\n  background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 10px;\r\n  font-size: 0.9rem;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.retry-btn:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 8px 25px rgba(239, 68, 68, 0.3);\r\n}\r\n\r\n.retry-icon {\r\n  font-size: 1rem;\r\n}\r\n\r\n.participants-list {\r\n  background: rgba(255, 255, 255, 0.8);\r\n  border-radius: 15px;\r\n  padding: 20px;\r\n  border: 1px solid rgba(102, 126, 234, 0.1);\r\n}\r\n\r\n.list-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.list-title {\r\n  margin: 0;\r\n  font-size: 1.1rem;\r\n  font-weight: 700;\r\n  color: #1e293b;\r\n}\r\n\r\n.refresh-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 8px 16px;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 10px;\r\n  font-size: 0.9rem;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.refresh-btn:hover:not(:disabled) {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);\r\n}\r\n\r\n.refresh-btn:disabled {\r\n  opacity: 0.6;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.refresh-icon {\r\n  font-size: 1rem;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.refresh-btn:not(:disabled):hover .refresh-icon {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.participants-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n  gap: 15px;\r\n}\r\n\r\n.participant-card {\r\n  position: relative;\r\n  padding: 20px;\r\n  background: white;\r\n  border: 2px solid #e2e8f0;\r\n  border-radius: 15px;\r\n  transition: all 0.3s ease;\r\n  overflow: hidden;\r\n}\r\n\r\n.participant-card.online {\r\n  border-color: #10b981;\r\n  background: linear-gradient(135deg, rgba(16, 185, 129, 0.05) 0%, rgba(16, 185, 129, 0.02) 100%);\r\n}\r\n\r\n.participant-card.offline {\r\n  border-color: #ef4444;\r\n  background: linear-gradient(135deg, rgba(239, 68, 68, 0.05) 0%, rgba(239, 68, 68, 0.02) 100%);\r\n}\r\n\r\n.participant-card.current-participant {\r\n  border-color: #667eea;\r\n  background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(102, 126, 234, 0.05) 100%);\r\n  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);\r\n}\r\n\r\n.participant-card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.participant-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.participant-info {\r\n  flex: 1;\r\n}\r\n\r\n.participant-name {\r\n  font-size: 1.1rem;\r\n  font-weight: 700;\r\n  color: #1e293b;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.participant-id {\r\n  font-size: 0.85rem;\r\n  color: #64748b;\r\n  font-weight: 500;\r\n}\r\n\r\n.status-indicator {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.status-dot {\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  background: #ef4444;\r\n  animation: pulse 2s infinite;\r\n}\r\n\r\n.status-dot.online {\r\n  background: #10b981;\r\n}\r\n\r\n.status-dot.offline {\r\n  background: #ef4444;\r\n}\r\n\r\n@keyframes pulse {\r\n  0%, 100% {\r\n    opacity: 1;\r\n  }\r\n  50% {\r\n    opacity: 0.5;\r\n  }\r\n}\r\n\r\n.status-text {\r\n  font-size: 0.85rem;\r\n  font-weight: 600;\r\n  color: #64748b;\r\n}\r\n\r\n.participant-details {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.detail-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.detail-label {\r\n  font-size: 0.85rem;\r\n  color: #64748b;\r\n  font-weight: 500;\r\n}\r\n\r\n.detail-value {\r\n  font-size: 0.85rem;\r\n  color: #1e293b;\r\n  font-weight: 600;\r\n}\r\n\r\n.current-badge {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  padding: 4px 12px;\r\n  border-radius: 20px;\r\n  font-size: 0.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.system-info {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  gap: 15px;\r\n  padding: 15px;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  border-radius: 15px;\r\n  border: 1px solid rgba(102, 126, 234, 0.1);\r\n}\r\n\r\n.info-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n.info-label {\r\n  font-size: 0.8rem;\r\n  color: #64748b;\r\n  font-weight: 500;\r\n}\r\n\r\n.info-value {\r\n  font-size: 1rem;\r\n  color: #1e293b;\r\n  font-weight: 700;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .status-overview {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .participants-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .system-info {\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n  \r\n  .list-header {\r\n    flex-direction: column;\r\n    gap: 15px;\r\n    align-items: stretch;\r\n  }\r\n  \r\n  .refresh-btn {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .error-message {\r\n    flex-direction: column;\r\n    text-align: center;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}